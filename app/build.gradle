apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
import org.apache.tools.ant.taskdefs.condition.Os

android {
    // ========================================
    // 全局配置
    // ========================================
    compileSdkVersion 33
    buildToolsVersion '33.0.0'

    // ========================================
    // 应用基础配置
    // ========================================
    defaultConfig {
        // 应用ID
        applicationId "com.phecda"
        
        // 编译版本
        minSdkVersion 23
        targetSdkVersion 33
        
        // 版本信息
        versionCode 100000
        versionName "1.0.0"

        // 多语言支持
        resConfigs "zh"

        // 动态构建信息
        buildConfigField "String", "BUILD_TIME", "\"${new Date().format("yyyy-MM-dd HH:mm:ss")}\""
        buildConfigField "String", "BUILD_HOST", "\"${InetAddress.getLocalHost().getHostName()}\""

        // C++ 编译配置
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }

        // NDK 支持的 ABI
        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
        }
    }

    // ========================================
    // 构建类型配置
    // ========================================
    buildTypes {
        release {
            // 代码混淆
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // 资源压缩
            shrinkResources true
            
            // 签名配置
            signingConfig signingConfigs.omarea_Signing

            // 优化配置
            zipAlignEnabled true
            debuggable false
            jniDebuggable false
        }

        release_mini {
            // 轻量版构建配置（示例）
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
        }

        debug {
            // 调试版配置
            minifyEnabled false
            debuggable true
            jniDebuggable false
        }
    }

    // ========================================
    // 签名配置
    // ========================================
    signingConfigs {
        omarea_Signing {
            // 密钥库路径（建议使用相对路径）
            storeFile file('../Merak.jks')
            storePassword 'wmp831121'
            keyAlias 'Merak'
            keyPassword 'wmp831121'
        }
    }

    // ========================================
    // 构建输出配置
    // ========================================
    applicationVariants.all { variant ->
        variant.outputs.all {
            // 自定义 APK 命名规则
            def buildType = variant.buildType.name
            def version = "${defaultConfig.versionName}_${defaultConfig.versionCode}"
            outputFileName = "Scene_${version}_${buildType}.apk"
        }
    }

    // ========================================
    // 第三方工具配置
    // ========================================
    dataBinding {
        enabled = true
    }

    // ========================================
    // 本地库加密任务
    // ========================================
    task encryptNativeLibs {
        doLast {
            def abis = ["armeabi-v7a", "arm64-v8a", "x86_64"]
            abis.each { abi ->
                def soFile = file("src/main/cpp/${abi}/libnative-lib.so")
                def encryptedFile = file("src/main/assets/${abi}/libnative-lib.so.enc")
                if (soFile.exists()) {
                    exec {
                        commandLine 'sh', 'password.sh', abi, soFile.absolutePath, encryptedFile.absolutePath
                    }
                }
            }
        }
    }
    preBuild.dependsOn encryptNativeLibs

    // ========================================
    // 资源打包配置
    // ========================================
    packagingOptions {
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/LICENSE.md'
    }

    // ========================================
    // C++ 编译配置
    // ========================================
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    // ========================================
    // NDK 版本配置
    // ========================================
    ndkVersion '26.3.11579264'
}

dependencies {
    // ========================================
    // Kotlin 支持
    // ========================================
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // ========================================
    // AndroidX 依赖
    // ========================================
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // ========================================
    // 网络请求
    // ========================================
    implementation 'com.squareup.okhttp3:okhttp:4.13.1'

    // ========================================
    // 协程支持
    // ========================================
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"

    // ========================================
    // 内存泄漏检测
    // ========================================
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'

    // ========================================
    // Xposed 相关
    // ========================================
    compileOnly 'de.robv.android.xposed:api:82'
    implementation 'org.lsposed.hiddenapibypass:hiddenapibypass:4.3'

    // ========================================
    // 本地模块依赖
    // ========================================
    implementation project(':common')
    implementation project(':krscript')

    // ========================================
    // 邮件支持
    // ========================================
    implementation 'com.sun.mail:android-mail:1.6.7'
    implementation 'com.sun.mail:android-activation:1.6.7'

    // ========================================
    // 自定义依赖（需确认仓库配置）
    // ========================================
    // implementation 'com.github.example:battery-status:1.0.0'
}

// ========================================
// 仓库配置
// ========================================
repositories {
    mavenCentral()
    // 如需使用 GitHub Packages，添加以下配置：
    // maven {
    //     url = uri("https://maven.pkg.github.com/username/repo")
    //     credentials {
    //         username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
    //         password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
    //     }
    // }
}
